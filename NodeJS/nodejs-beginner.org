* About 

本文档的目的是让你开始使用 Node .js 开发应用程序，并一路上教您有关"高级"JavaScript 的所有信息。它远远超出了你典型的"你好世界"教程。

** status

您正在阅读本书的最终版本，即更新只是为了更正错误或反映新版本的 Node .js。上次更新日期为 2017 年 6 月 5 日。

本书中的代码示例经过测试，可同时使用长期支持版本 6.10.3 以及最新版本的 8.0.0 0 的 Node .js。

这个网站可以让你免费阅读这本书的前19页。全文可作为无 DRM 电子书（PDF、ePub 和 Kindle 格式）提供。更多信息可在免费零件的末尾找到。

** 目标受众

本文档可能最适合具有与我自己的背景类似的读者：至少使用一种面向对象的语言（如 Ruby、Python、PHP 或 Java）体验，只有很少的
JavaScript 经验，对 Node.js 完全具有新体验。

针对已经拥有其他编程语言经验的开发人员，本文档不会涵盖数据类型、变量、控制结构等真正基本的内容。您已经需要知道这些内容才能了解本文档。

但是，由于 JavaScript 中的函数和对象与大多数其他语言中的函数和对象不同，因此将更详细地解释这些函数和对象。

** 本文档的结构

完成本文档后，您将创建一个完整的 Web 应用程序，允许此应用程序的用户查看网页和上传文件。

当然，这并不完全改变世界，但我们会多走几英里，不仅创建"足够"的代码，使这些用例成为可能，
而且创建一个简单而完整的框架，以干净地分离我们应用程序的不同方面。一会儿就看我的意思了。

我们将首先了解node中的 JavaScript 开发.js中的 JavaScript 开发与 JavaScript 开发的不同。

接下来，我们将保持良好的老传统，写一个"你好世界"的应用程序，这是一个最基本的 nodejs应用程序，"做"的东西。

然后，我们将讨论我们要构建什么样的"真实"应用程序，剖析组装此应用程序需要实现的不同部分，并逐步开始处理每个部分。

正如所承诺的，一路上，我们将了解JavaScript的一些更高级的概念，如何使用它们，并看看为什么使用这些概念，而不是从其他编程语言知道的概念有意义。

已完成应用程序的源代码可通过 NodeBeginnerBook Github 存储库获得。

* JavaScript and Node.js

** JavaScript and You

在我们讨论所有技术内容之前，让我们花点时间谈谈您和您与 JavaScript 的关系。
本章是为了让您估计阅读本文档是否对您有意义。

如果你和我一样，你很久以前就开始写HTML文档了。你带着这个有趣的东西叫做JavaScript，
但是你只是用一种非常基本的方式，在网页中时时增加交互性。

你真正想要的是"真实的东西"，你想知道如何构建复杂的网站——你学会了像PHP、Ruby、Java这样的编程语言，
并开始编写"后端"代码。

然而，你一直关注JavaScript，你发现随着jQuery、原型和诸如"等"的引入，
在JavaScript的土地上，事情变得更加先进，而且这种语言确实不仅仅是窗口。

然而，这一切仍然是前端的东西，虽然这是很好的有jQuery在你的处置，
每当你想辣一个网页，在一天结束的时候，你充其量是一个JavaScript
用户，但不是 JavaScript 开发人员。

然后是Node.js。服务器上的 JavaScript，这有多酷？

您决定是时候查看旧的新 JavaScript 了。
但等待，编写Node.js应用程序是一回事;理解为什么它们需要以它们编写的方式编写 — — 理解 JavaScript 。而这一次是真的。



问题是：因为JavaScript真的活了两个，甚至三个生命（有趣的小DHMTL帮助者从90年代中期，更严重的前端的东西，如jQuery和喜欢，现在服务器端）
，它不是那么容易找到信息，可以帮助你学习JavaScript的"正确"方式，

以编写Node.js应用程序的方式， 让你感觉你不是只是使用JavaScript，你实际上是在开发它。

因为这就是问题：你已经是一个有经验的开发人员，你不想学习新技术，只是黑客周围和误用它;你想确保你是
从正确的角度接近它。

当然，有优秀的文档在那里。但是，单靠文档有时是不够的。所需要的是指导。

我的目标是为您提供一个指南。

** A word of warning

有一些非常优秀的 JavaScript 人在那里。我不是他们中的一个.

我真的只是我在前一段谈到的那个人。

我对开发后端 Web 应用程序了解一两件事，但我对"真正的"JavaScript 还是新认识的，

对 Node .js。我最近学习了JavaScript的一些更高级的方面。我没有经验

这就是为什么这不是 "从新手到专家" 的书。更像是"从新手到高级新手"。

如果我不失败，那么这将是我希望在从 NodeJS 开始时拥有的文档。

** Server-side JavaScript

JavaScript 的第一个化身生活在浏览器中。但这只是背景。

它定义了您可以对语言做什么，但它并没有说语言本身能做什么。

JavaScript 是一种"完整"语言：您可以在许多上下文中使用它，并借助它实现使用任何其他"完整"语言实现的所有内容。

Node.js只是另一个上下文：它允许您在浏览器外的后端运行 JavaScript 代码。

为了执行要在后端运行的 JavaScript，需要解释它，并执行它。

这就是 Node.js利用谷歌的V8虚拟机，与谷歌Chrome使用的JavaScript相同的运行时环境。

此外，Node .js附带了很多有用的模块，因此您不必从头开始编写所有内容，例如在控制台上输出字符串的东西。

因此，Node.js两件事：运行时环境和库。

为了使用这些，您需要安装Node.js。我恳请您访问官方安装说明1，而不是在这里重复这个过程。启动并运行后请回来。

** "Hello World"

好吧， 让我们跳进冷水， 写我们的第一个节点.js应用程序： "你好世界" 。

打开您最喜爱的编辑器并创建一个名为 helloworld .js。我们希望它写 "你好世界" 到 STDOUT， 这里是所需的代码做到这一点：

#+BEGIN_SRC
console.log（"你好世界"）;
#+END_SRC

保存文件，并通过 Node 执行.

#+BEGIN_SRC
node helloworld.js
#+END_SRC

这应该在您的终端上输出 你好世界。好吧，这东西很无聊，对吧？让我们写一些真实的东西。

* A full blown web application with Node.js 一个用NodeJS的完整Web应用程序

** The use cases

让我们保持简单，但现实：

•用户应该能够使用我们的应用程序与网页浏览器
•用户在请求时应该看到一个欢迎页面http://domain/start该页面显示文件上传表
•通过选择要上传和提交表单的图像文件，该图像应该上传到http://domain/upload，，一旦上传完成，它就会显示在哪里

很公平。 现在，你可以通过谷歌搜索和黑客攻击来实现这个目标。 但这不是我们想在这里做的。

此外，我们不想只编写最基本的代码来实现这个目标，不管这个代码可能是多么优雅和正确。 

为了获得构建更复杂的Node.js应用程序的感觉，我们将有意添加比必要更多的抽象.

** The application stack
 
让我们剖析一下我们的应用程序。 为了完成用例，需要实现哪些部分？

•我们想提供网页，因此我们需要一个HTTP服务器
•我们的服务器将需要对请求进行不同的回答，这取决于请求要求的URL，因此我们需要某种路由器来将请求映射到请求处理程序.
•要完成到达服务器并使用路由器进行路由的请求，我们需要实际的请求处理程序.
•路由器可能还应该处理任何传入的POST数据，并以方便的形式将其交给请求处理程序，因此我们需要请求数据处理.
•我们不仅要处理URL的请求，而且要在请求这些URL时显示内容，这意味着我们需要请求处理程序可以使用的一种视图逻辑，以便将内容发送到用户的浏览器.
•最后但并非最不重要的是，用户将能够上传图像，所以我们将需要某种上传处理，以照顾细节.

让我们思考一下如何使用PHP构建这个堆栈。 典型的设置是安装mod_php5的Apache HTTP服务器，这并不是一个秘密。 

这反过来又意味着整个“我们需要能够服务于网页和接收HTTP请求”的东西不会发生在PHP本身。

让我们思考一下如何使用PHP构建这个堆栈。 典型的设置是安装mod_php5的Apache HTTP服务器，这并不是一个秘密。 

这反过来又意味着整个“我们需要能够服务于网页和接收HTTP请求”的东西不会发生在PHP本身。
嗯，与Nodejs，事情有点不同。 

因为使用Node.js，我们不仅实现了我们的应用程序，还实现了整个HTTP服务器。 

事实上，我们的web应用程序和它的web服务器基本上是一样的。

这听起来可能是很多工作，但我们会看到，在Node.js中，它不是。
 
让我们从一开始就实现堆栈的第一部分HTTP服务器。

* Building the application stack

** A basic HTTP server

当我到达我想从我的第一个“真正的”Node.js应用程序开始的时候，我不仅想知道如何实际地编码它，而且还想知道如何组织我的代码。

我需要把所有的东西都放在一个文件里吗？ 网络上教你如何在Node.js中编写基本HTTP服务器的大多数教程都将所有逻辑放在一个地方。 

如果我想确保我的代码在实现更多的东西时保持可读性呢？

结果是，通过将代码放在模块中来保持代码的不同关注点是相对容易的。

这允许您拥有一个干净的主文件，您可以使用Node.js执行该文件，并且可以使用主文件和其他模块。

因此，让我们创建一个用于启动应用程序的主文件和一个HTTP服务器代码所在的模块文件。

我的印象是，命名主文件index.js或多或少是一个标准。 将我们的服务器模块放入一个名为server.js的文件中是有意义的。

让我们从服务器模块开始。 在项目的根目录中创建文件server.js，并用以下代码填充：

就这样！ 您刚刚编写了一个工作HTTP服务器。 让我们通过运行和测试来证明它。 首先，使用Node.js执行脚本：

node server.js

现在，打开浏览器，指向http://localhost：8888/。 这应该显示一个网页，上面写着“你好世界”。 这很有趣，不是吗。 谈谈这里发生了什么，留下如何组织我们的项目的问题，怎么样？ 我保证我们会回到我身边

** Analyzing our HTTP Server

那么，让我们来分析一下这里到底发生了什么。 
第一行需要带有Node.js的http模块，并通过变量http使其可访问。

然后我们调用http模块提供的函数之一：createServer。 

此函数返回一个对象，该对象有一个名为侦听的方法，并接受一个数值，该数值表示我们的HTTP服务器将要侦听的端口号。

请忽略 http.createServer 的打开括号后的功能定义。

我们可以编写代码，启动我们的服务器，并使它听在端口8888像这样：

这将启动一个 HTTP 服务器侦听端口 8888，不执行任何其他操作（甚至不应答任何传入请求）。

真正有趣的（如果你的背景是一个更保守的语言，如PHP，奇怪的）部分是函数定义就在那里，你会期待第一个参数的创建服务（）调用。

事实证明，此函数定义是我们为 createServer（） 调用提供的第一个（也是唯一的）参数。因为在 JavaScript 中，函数可以像任何其他值一样传递。

** Passing functions around 

仔细阅读！我们在这里所做的是，我们将函数说作为执行函数的第一个参数传递给执行函数。不是说的返回值，而是说自己！

因此，请作为执行中的局部变量，执行可以通过发出一些函数（添加括号）来调用此变量中的函数。

当然，因为说需要一个参数，执行可以传递这样的参数时调用一些功能。

我们可以像刚才做的一样，通过它的名字将一个函数作为参数传递给另一个函数。

但是，我们不必先进行这种间接定义，然后传递它. 

可以定义一个函数，将一个函数作为参数传递给另一个函数

我们定义了要传递的函数，该函数在执行所需的第一个参数的位置执行。

这样，我们甚至不需要为函数命名，这就是为什么这被称为匿名函数的原因。

这是我喜欢称之为"高级"JavaScript的第一瞥，但让我们一步一步地做。

现在，让我们接受在 JavaScript 中，我们可以在调用另一个函数时将函数作为参数传递。我们可以通过将函数分配给变量（然后我们传递）或定义要就地传递的函数来做到这一点。

也许现在是一个问：我们为什么要这样做的一个好消息？

** How function passing makes our HTTP server work
** Event-driven asynchronous callbacks 
** How our server handles requests
** Finding a place for our server module
** What's needed to "route" requests?
** Execution in the kingdom of verbs
** Routing to real request handlers
** Making the request handlers respond
** Serving something useful
** Handling POST requests
** Handling file uploads